<?xml version="1.0"?>
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/7.3.0/rti_routing_service.xsd">


  <!-- 
    Set up default config ENV variables after 6.1.14. 
    Override with either ENV variables i.e. "export VAR=X" or command line -DVAR=X 
    -->
  <configuration_variables>
    <value>

      <!-- 
        This will either be the Platform or C2 name depending on where this is being run 
        -->
      <element>
        <name>ROUTER_NAME</name>
        <value>VEHICLE_123</value>
      </element>

      <element>
        <name>PLATFORM_GUID</name>
        <value>ef32b88e6e0c49e99886ae20c28d7f3c</value>
      </element>

      <!-- ________________________ QOS Profiles____________________________ -->

      <!-- 
        Generally both "sides" i.e. Platform and C2 likely are using the same QoS 
        however there could be scenarios where they would be different such 
        as separate teams ownership.
        In that case, assign each side independently.
      -->
      <element>
        <name>PLATFORM_QOS</name>
        <value>act_qos_lib::lan_qos</value>
      </element>

      <element>
        <name>C2_QOS</name>
        <value>act_qos_lib::lan_qos</value>
      </element>

      <element>
        <name>COMMS_QOS</name>
        <value>act_qos_lib::comms_qos</value>
      </element>


      <!-- ________________________ Domain IDS _____________________________ -->
      <element>
        <name>CONTROL_DOMAIN</name>
        <value>100</value>
      </element>
      <element>
        <name>PLATFORM_DOMAIN</name>
        <value>0</value>
      </element>
      <element>
        <name>COMMS_DOMAIN</name>
        <value>1</value>
      </element>
      <element>
        <name>C2_DOMAIN</name>
        <value>2</value>
      </element>

      <!-- ________________________ SWITCHES _______________________________ -->
      <element>
        <name>P2P_ENABLE</name>
        <value>false</value>
      </element>

      <!-- 
        This variable enables distributed logging and monitoring on the Remote Admin Service.
        We most likely will want them disabled in a deployed environment to optimize bandwidth 
      -->
      <element>
        <name>DEBUG_MODE</name>
        <value>true</value>
      </element>

      <!-- 
        ___________________________ FILTERS ____________________________________

        These are the filters used in the auto topic routes between domains. 
        If there are any duplicate topic names include namespace as necessary otherwise removed with
        wildcard for brevity.
        NOTE: No spaces in the lists or they break silently
        -->
      <element>
        <!-- This filter is intended for data coming from the PLATFORM going to the C2 -->
        <name>PLATFORM_STATUS_FILTER</name>
        <value>PlatformStatus,C2CommandAck</value>
      </element>
      <element>
        <!-- 
            This filter is intended for data coming from the C2 going to the PLATFORM that is addressed to destination.parentID
            It includes a Content Filter that will only allow messages to the matching parentID 
          -->
        <name>C2_COMMAND_FILTER</name>
        <value>C2Command</value>
      </element>

      <!-- Update these filters below with the necessary values -->
      <element>
        <!-- This filter is intended for Topics we want to be made available between Platforms -->
        <name>PLATFORM_TO_PLATFORM_FILTER</name>
        <value>DISABLED</value>
      </element>
    </value>
    
  </configuration_variables>


  <!--
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////

      DO NOT MODIFY BELOW THIS LINE. READ-ONLY. ALL CONTROL SHOULD BE DONE THROUGH THE CONFIGURATION VARIABLES ABOVE
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->


  <routing_service name="c2">

    <annotation>
      <documentation>
        This configuration defines message routing on the C2 side.

        Sessions are created where thread pools/prioritization can be assigned.
        They can also be enabled/disabled dynamically.

        Within that are auto topic routes that generate readers and writers
        based on the *FILTER parameters.
      </documentation>
    </annotation>

    <!-- The administration tag enables remote administration, and is
            required when using Admin Console. -->
    <administration>
      <domain_id>$(CONTROL_DOMAIN)</domain_id>
      <distributed_logger>
        <enabled>$(DEBUG_MODE)</enabled>
        <filter_level>WARNING</filter_level>
      </distributed_logger>
      <datareader_qos base_name="act_qos_lib::remote_admin_replier_qos" />
      <datawriter_qos base_name="act_qos_lib::remote_admin_replier_qos" />
      <domain_participant_qos>
        <participant_name>
          <name>$(ROUTER_NAME) ADMIN</name>
        </participant_name>
      </domain_participant_qos>
    </administration>

    <!-- 
      This is the Monitoring configuration for all the entities in
      this routing service, and is required when using Admin Console. 
      -->
    <monitoring>
      <enabled>$(DEBUG_MODE)</enabled>
      <!-- The domain id where to publish the monitoring information -->
      <domain_id>$(CONTROL_DOMAIN)</domain_id>
      <!-- How often to publish it -->
      <status_publication_period>
        <sec>5</sec>
        <nanosec>0</nanosec>
      </status_publication_period>

      <!-- How often to compute statistics -->
      <statistics_sampling_period>
        <sec>1</sec>
        <nanosec>0</nanosec>
      </statistics_sampling_period>
      <domain_participant_qos>
        <participant_name>
          <name>$(ROUTER_NAME) MONITOR</name>
        </participant_name>
      </domain_participant_qos>
    </monitoring>


    <domain_route>

      <!-- Define Domain Participants for the C2 side -->
      <participant name="comms_participant">
        <domain_id>$(COMMS_DOMAIN)</domain_id>
        <domain_participant_qos base_name="$(COMMS_QOS)">
          <participant_name>
            <name>$(ROUTER_NAME) COMMS</name>
          </participant_name>
        </domain_participant_qos>
      </participant>

      <participant name="c2_participant">
        <domain_id>$(C2_DOMAIN)</domain_id>
        <domain_participant_qos base_name="$(C2_QOS)">
          <participant_name>
            <name>$(ROUTER_NAME) C2</name>
          </participant_name>
        </domain_participant_qos>
      </participant>


      <session name="c2_to_comms_guid">

        <!-- C2 -> COMMS Commands -->
        <auto_topic_route name="c2_command_filter">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="c2_participant">
            <allow_topic_name_filter>$(C2_COMMAND_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(C2_QOS)"/>
          </input>
          <output participant="comms_participant">
            <allow_topic_name_filter>$(C2_COMMAND_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(COMMS_QOS)"/>
          </output>
        </auto_topic_route>
      </session>

      <session name="comms_to_c2">

        <!-- COMMS -> C2 Commands -->
        <auto_topic_route name="platform_status_filter">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="comms_participant">
            <allow_topic_name_filter>$(PLATFORM_STATUS_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(COMMS_QOS)"/>
          </input>
          <output participant="c2_participant">
            <allow_topic_name_filter>$(PLATFORM_STATUS_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(PLATFORM_QOS)"/>
          </output>
        </auto_topic_route>
      </session>

    </domain_route>
  </routing_service>


  <routing_service name="platform">

    <annotation>
      <documentation>
        This configuration defines message routing on the C2 side.

        Sessions are created where thread pools/prioritization can be assigned.
        They can also be enabled/disabled dynamically.

        Within that are auto topic routes that generate readers and writers 
        based on the *FILTER parameters.
      </documentation>
    </annotation>

    <!-- The administration tag enables remote administration, and is
            required when using Admin Console. -->
    <administration>
      <domain_id>$(CONTROL_DOMAIN)</domain_id>
      <distributed_logger>
        <enabled>$(DEBUG_MODE)</enabled>
        <filter_level>WARNING</filter_level>
      </distributed_logger>
      <datareader_qos base_name="act_qos_lib::remote_admin_replier_qos" />
      <datawriter_qos base_name="act_qos_lib::remote_admin_replier_qos" />
      <domain_participant_qos>
        <participant_name>
          <name>$(ROUTER_NAME) ADMIN</name>
        </participant_name>
      </domain_participant_qos>
    </administration>

    <!-- 
      This is the Monitoring configuration for all the entities in
      this routing service, and is required when using Admin Console. 
      -->
    <monitoring>
      <enabled>$(DEBUG_MODE)</enabled>
      <!-- The domain id where to publish the monitoring information -->
      <domain_id>$(CONTROL_DOMAIN)</domain_id>
      <!-- How often to publish it -->
      <status_publication_period>
        <sec>5</sec>
        <nanosec>0</nanosec>
      </status_publication_period>

      <!-- How often to compute statistics -->
      <statistics_sampling_period>
        <sec>1</sec>
        <nanosec>0</nanosec>
      </statistics_sampling_period>
      <domain_participant_qos>
        <participant_name>
          <name>$(ROUTER_NAME) MONITOR</name>
        </participant_name>
      </domain_participant_qos>
    </monitoring>

    <domain_route>

      <!-- Define Domain Participants for the Platform side -->
      <participant name="platform_participant">
        <domain_id>$(PLATFORM_DOMAIN)</domain_id>
        <domain_participant_qos base_name="$(PLATFORM_QOS)">
          <participant_name>
            <name>$(ROUTER_NAME) PLATFORM</name>
          </participant_name>
        </domain_participant_qos>
      </participant>

      <participant name="comms_participant">
        <domain_id>$(COMMS_DOMAIN)</domain_id>
        <domain_participant_qos base_name="$(COMMS_QOS)">
          <participant_name>
            <name>$(ROUTER_NAME) COMMS</name>
          </participant_name>
        </domain_participant_qos>
      </participant>


      <session name="platform_to_comms">

        <!-- PLATFORM -> COMMS Status messages -->
        <auto_topic_route name="platform_status_filter">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="platform_participant">
            <allow_topic_name_filter>$(PLATFORM_STATUS_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(PLATFORM_QOS)" />
          </input>
          <output participant="comms_participant">
            <allow_topic_name_filter>$(PLATFORM_STATUS_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(COMMS_QOS)" />
          </output>
        </auto_topic_route>
      </session>

      <session name="comms_to_platform_guid">

        <!-- COMMS -> PLATFORM Commands if MATCH filter expression -->
        <auto_topic_route name="c2_command_filter">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="comms_participant">
            <allow_topic_name_filter>$(C2_COMMAND_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(COMMS_QOS)" />

            <!-- Use a SQL style syntax to filter on message content -->
            <content_filter>
              <expression>msg.destination = &amp;hex($(PLATFORM_GUID))</expression>
            </content_filter>
          </input>
          <output participant="platform_participant">
            <allow_topic_name_filter>$(C2_COMMAND_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(PLATFORM_QOS)" />
          </output>
        </auto_topic_route>

      </session>

      <!-- This session moves messages between platforms -->
      <session name="platform_to_platform" enabled="$(P2P_ENABLE)">

        <!-- PLATFORM -> COMMS P2P messages -->
        <auto_topic_route name="platform_to_comms">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="platform_participant">
            <allow_topic_name_filter>$(PLATFORM_TO_PLATFORM_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(PLATFORM_QOS)" />
          </input>
          <output participant="comms_participant">
            <allow_topic_name_filter>$(PLATFORM_TO_PLATFORM_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(COMMS_QOS)" />
          </output>
        </auto_topic_route>

        <!-- COMMS -> PLATFORM P2P messages -->
        <auto_topic_route name="comms_to_platform">
          <publish_with_original_info>true</publish_with_original_info>
          <input participant="comms_participant">
            <allow_topic_name_filter>$(PLATFORM_TO_PLATFORM_FILTER)</allow_topic_name_filter>
            <datareader_qos base_name="$(COMMS_QOS)" />
          </input>
          <output participant="platform_participant">
            <allow_topic_name_filter>$(PLATFORM_TO_PLATFORM_FILTER)</allow_topic_name_filter>
            <datawriter_qos base_name="$(PLATFORM_QOS)" />
          </output>
        </auto_topic_route>
      </session>

    </domain_route>
  </routing_service>
</dds>